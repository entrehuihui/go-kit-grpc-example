// Code generated by go-bindata.
// sources:
// migrations/0003_commodity.sql
// migrations/0004_orderinfo.sql
// migrations/0005_pay.sql
// migrations/0006_refund.sql
// DO NOT EDIT!

package orderpostgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0003_commoditySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3f\x4f\x02\x41\x10\xc5\xfb\x4d\xf6\x3b\xbc\x5c\x03\x44\x2f\x31\x04\x2a\x2a\x94\x2b\x8c\x27\xe0\x09\x05\xe5\x7a\x3b\x91\x09\xfb\x2f\xbb\x8b\xe8\xb7\x37\x1c\x09\x51\xa2\xc6\xf6\xfd\xde\xcc\x64\x7e\x65\x89\x2b\xcb\xaf\x51\x65\xc2\x3a\x48\x51\x96\x78\x7e\xaa\xc1\x0e\x89\xda\xcc\xde\xa1\xb7\x0e\x3d\x70\x02\xbd\x53\xbb\xcf\xa4\x71\xd8\x92\x43\xde\x72\xc2\x69\xf0\x58\xe2\x04\x15\x82\x61\xd2\x52\xdc\x35\xd5\x74\x55\x61\x35\xbd\xad\x2b\xb4\xde\x5a\xaf\x39\x7f\x48\xd1\x97\x02\x28\x58\x17\x48\x14\x59\x99\xd1\x75\x17\x38\x65\xa9\xc0\x9b\x8a\xed\x56\xc5\xfe\xf0\x66\x80\xf9\x62\x85\xf9\xba\xae\x4f\x5c\x53\x56\x6c\xd2\x97\xca\x78\x7c\xd9\xf1\x46\x87\xc8\x2d\x15\x60\x97\x47\x17\xd0\xd1\xe1\x77\xd8\x91\x48\x56\xc5\xdd\x9f\x17\xf6\x41\xab\x4c\x99\xed\xcf\x6b\x52\x56\x79\x9f\x3a\x34\xfc\x8e\x96\xcd\xfd\xe3\xb4\xd9\xe0\xa1\xda\xa0\x7f\xfc\x7e\x20\xc5\x60\x22\x45\xa7\xfa\xac\x7e\xe6\x0f\xee\x2c\xff\x6c\xfe\x98\xfe\xcb\x7d\xf4\xc6\x90\xc6\x8b\x6a\x77\x52\xcc\x9a\xc5\xf2\xd2\xfe\xe4\x33\x00\x00\xff\xff\x5c\x84\x48\xec\xe8\x01\x00\x00")

func _0003_commoditySqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_commoditySql,
		"0003_commodity.sql",
	)
}

func _0003_commoditySql() (*asset, error) {
	bytes, err := _0003_commoditySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_commodity.sql", size: 488, mode: os.FileMode(438), modTime: time.Unix(1556155641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0004_orderinfoSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x4f\xc2\x40\x14\xc4\xef\x4d\xfa\x1d\x26\x5c\x68\xa3\xbd\x20\x9c\x38\xa1\xf4\x40\xac\x05\x2b\x24\x72\x22\x6b\xf7\x29\x2f\x94\xed\x66\x77\x2b\x7c\x7c\xb3\xfe\x29\x46\xac\xf1\x3a\xbf\x99\xdd\x97\x99\x24\xc1\xc5\x9e\x5f\x8c\x70\x84\x95\x0e\x83\x24\xc1\xc3\x7d\x06\x56\xb0\x54\x3a\xae\x15\xfa\x2b\xdd\x07\x5b\xd0\x91\xca\xc6\x91\xc4\x61\x4b\x0a\x6e\xcb\x16\x1f\x41\x6f\x62\x0b\xa1\x75\xc5\x24\xc3\xe0\xa6\x48\x27\xcb\x14\xcb\xc9\x75\x96\xa2\x36\x92\x0c\xab\xe7\x3a\x0c\xa2\x30\x00\x80\x1e\xcb\x1e\x2c\x19\x16\xd5\xf0\xf2\x53\x6a\xbc\xf6\x2a\x4c\xb9\x15\x26\xba\x1a\xc4\xc8\xe7\x4b\xe4\xab\x2c\xfb\x32\x94\xde\xc0\xca\x0d\xcf\x88\xee\x24\xa5\x36\x5c\x52\x57\xcc\x33\x43\x7b\x61\x76\xa7\x9f\x07\xa3\x51\xdc\xa6\x0d\x09\x47\x8e\xf7\x5d\x2f\x34\x5a\xfe\x6d\xb0\x4e\xb8\xc6\xbe\xc3\xc1\x19\x94\x54\x75\x12\x27\xb8\xb2\xbf\x5e\xb5\x28\x66\x77\x93\x62\x8d\xdb\x74\x8d\xc8\x17\x19\x87\x41\x3c\x6e\x2b\x9f\xe5\xd3\xf4\xf1\x54\xf9\xa6\x61\xb9\x61\x25\xe9\x88\x79\x7e\x92\x11\x35\x2c\x7d\xea\xfb\xf6\xd3\xfa\xa0\xda\xf5\xdb\xe9\xbd\xfa\xaf\xf1\x4d\x5d\x55\x24\xf1\x24\xca\x5d\x18\x4c\x8b\xf9\xe2\xe7\xfc\xe3\xb7\x00\x00\x00\xff\xff\x71\x8b\xaa\xd7\x69\x02\x00\x00")

func _0004_orderinfoSqlBytes() ([]byte, error) {
	return bindataRead(
		__0004_orderinfoSql,
		"0004_orderinfo.sql",
	)
}

func _0004_orderinfoSql() (*asset, error) {
	bytes, err := _0004_orderinfoSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0004_orderinfo.sql", size: 617, mode: os.FileMode(438), modTime: time.Unix(1556155650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0005_paySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6b\x22\x41\x14\xc4\xef\x03\xf3\x1d\x0a\x2f\x8e\xec\x0e\xb8\xae\x9e\x3c\xb9\xeb\x1c\x24\x93\xd1\x4c\x14\xe2\x49\xda\xe9\x47\x7c\x64\x6c\x9b\xfe\x13\xf5\xdb\x87\x8e\x89\x06\x06\x4d\xae\x55\xd5\x54\xd1\xef\x97\xa6\xf8\xb5\xe5\x67\x23\x1c\x61\xa1\xe3\x28\x4d\xf1\xf8\x90\x83\x15\x2c\x55\x8e\x77\x0a\xed\x85\x6e\x83\x2d\xe8\x40\x95\x77\x24\xb1\xdf\x90\x82\xdb\xb0\xc5\xe9\x61\x08\xb1\x85\xd0\xba\x66\x92\x71\xf4\xbf\xcc\x46\xf3\x0c\xf3\xd1\xbf\x3c\x83\x16\xc7\x38\x4a\xe2\x08\x00\x5a\x2c\x5b\xb0\x64\x58\xd4\xfd\xdf\x1f\x92\x0f\xda\xab\x30\xd5\x46\x98\xe4\x6f\xaf\x83\x62\x3a\x47\xb1\xc8\xf3\xcf\x80\x36\x5c\x51\x0b\xac\x5c\xbf\xe1\x19\x72\xb7\xec\xbd\x38\xbe\x3b\xbd\x86\xa3\xfc\x76\x4d\xe6\x52\xfc\xa7\xdb\x6d\x36\x9f\x96\x7e\x17\x72\xc2\x79\x7b\xa5\x46\x52\x7d\xc5\xa9\x0c\x09\x47\x8e\xb7\xd7\xb6\x7b\x2d\x6f\x07\x24\x39\xc1\xb5\xbd\xcc\xeb\x0d\x06\x8d\x79\xb3\x72\x72\x3f\x2a\x97\xb8\xcb\x96\x48\xc2\xf7\x77\xe2\xa8\x33\x3c\x9f\x68\x52\x8c\xb3\xa7\x70\xa2\x95\x67\xb9\x62\x25\xe9\x80\x69\x11\x04\x24\x9e\x65\x48\x7e\xe5\x63\xbc\xdb\xab\x33\x21\x67\x3c\x82\xfa\x23\x40\xcc\xae\xae\x49\x62\x2d\xaa\x97\x38\x1a\x97\xd3\xd9\x05\x91\xe1\x5b\x00\x00\x00\xff\xff\x0b\xdf\xf8\x8b\x87\x02\x00\x00")

func _0005_paySqlBytes() ([]byte, error) {
	return bindataRead(
		__0005_paySql,
		"0005_pay.sql",
	)
}

func _0005_paySql() (*asset, error) {
	bytes, err := _0005_paySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0005_pay.sql", size: 647, mode: os.FileMode(438), modTime: time.Unix(1556175307, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0006_refundSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x4f\xf2\x40\x18\xc4\xef\x4d\xfa\x1d\x26\x5c\x28\x79\xdf\x26\x88\x70\xe2\x84\xd2\x03\xb1\x16\xac\x90\xc8\x89\x2c\xdd\x47\x79\x62\xd9\x36\xfb\x47\xf0\xdb\x9b\x0a\x82\xa6\x29\x7a\x9d\xf9\x3d\xd9\xd9\xcc\x84\x21\xfe\x6d\xf9\x45\x0b\x4b\x58\x94\xbe\x17\x86\x78\x7c\x88\xc1\x0a\x86\x32\xcb\x85\x42\x7b\x51\xb6\xc1\x06\xb4\xa7\xcc\x59\x92\xd8\x6d\x48\xc1\x6e\xd8\xe0\x70\x58\x41\x6c\x20\xca\x32\x67\x92\xbe\x77\x9b\x46\xa3\x79\x84\xf9\xe8\x26\x8e\xa0\xe9\xd9\x29\xe9\x7b\x81\xef\x01\x40\x8b\x65\x0b\x86\x34\x8b\xbc\xff\xff\x28\xb9\x4a\x7b\x13\x3a\xdb\x08\x1d\x5c\xf7\x3a\x48\xa6\x73\x24\x8b\x38\xfe\x02\x8a\x0a\x60\x65\xfb\x35\xa7\x6c\x74\x8a\x52\x73\x46\x4d\x67\x17\xbc\x9d\x78\xff\x74\x7a\x35\x47\xb9\xed\x9a\xf4\x39\xea\x55\xb7\x5b\xcf\x7a\xf8\xdb\x6f\x90\x15\xd6\x99\x86\x67\x24\xe5\x0d\x4e\xa6\x49\x58\xb2\xbc\x6d\xca\xee\x4a\x79\x19\x90\x64\x05\xe7\xe6\x1c\xaf\x37\x18\xd4\xe2\xcd\xd2\xc9\xfd\x28\x5d\xe2\x2e\x5a\x22\xa8\x0a\xeb\xf8\x5e\x67\x78\xea\x75\x92\x8c\xa3\xa7\x63\xaf\x2b\xc7\x72\xc5\x4a\xd2\x1e\xd3\xe4\xa8\x21\x70\x2c\x2b\xfe\xfb\xb4\xc6\xc5\x4e\x9d\xc6\x75\x5a\x56\xa5\xfe\x69\x5b\xba\xc8\x73\x92\x58\x8b\xec\xd5\xf7\xc6\xe9\x74\xf6\x63\x5d\xc3\x8f\x00\x00\x00\xff\xff\x56\x6d\x35\xcb\xc5\x02\x00\x00")

func _0006_refundSqlBytes() ([]byte, error) {
	return bindataRead(
		__0006_refundSql,
		"0006_refund.sql",
	)
}

func _0006_refundSql() (*asset, error) {
	bytes, err := _0006_refundSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0006_refund.sql", size: 709, mode: os.FileMode(438), modTime: time.Unix(1556175295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0003_commodity.sql": _0003_commoditySql,
	"0004_orderinfo.sql": _0004_orderinfoSql,
	"0005_pay.sql": _0005_paySql,
	"0006_refund.sql": _0006_refundSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0003_commodity.sql": &bintree{_0003_commoditySql, map[string]*bintree{}},
	"0004_orderinfo.sql": &bintree{_0004_orderinfoSql, map[string]*bintree{}},
	"0005_pay.sql": &bintree{_0005_paySql, map[string]*bintree{}},
	"0006_refund.sql": &bintree{_0006_refundSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

